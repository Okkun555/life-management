---
description:
globs:
alwaysApply: true
---

# コードレビューについて
レビューを依頼したときは、書籍リーダブルコードに書かれていることが実現できているかの観点でレビューをおこなってください。
以下に一部抜粋したものを記載します。

### 2章：表面上の改善

- 時間やバイト数のように計測できるものであれば、変数名に単位を入れるといい
    - 例）size_mb, delay_secs
- 危険や注意を喚起する情報があれば変数名に追加する
    - passwordなど暗号化が必要なもの
        - 暗号化前の値を格納する変数：plaintext_password

### 3章：誤解されない名前

- :twitter:Rubyはエイリアスメソッドが多いのでその処理毎に適切なメソッド名を選択してあげるとよさそう
- 限界値を含める時はmin, maxを使う
    - 以上、以下で表現したい場合、minとmaxを変数名に使うことで限界値を含むことを表現できる
- 範囲を指定するときはfirst, lastを使う
    - 範囲を指定し、終端を範囲に含めるのであればfirst, lastを変数名に入れると理解しやすい

### 5章：コメントすべきことを知る

- コメントの目的は、書き手の意図を読み手に知らせることである
- 他人や数ヶ月後の自分がそのコードを見た時、ハマりそうな罠を告知する
    - 「このコードを見てびっくりすることはなんだろう？どんな風に間違えて使う可能性があるだろう？」と自分に問いかけてみる
        - 例）メールを送信する外部サービスを呼び出している（1分でタイムアウト）
- コメントすべきでないこと
    - コードからすぐに抽出できること
    - ひどいコードを補う「補助的なコメント」
- 記録すべき自分の考え
    - なぜコードが他のやり方でなくこうなっているのか
    - コードの欠陥をTODO:やXXX:記法を使って示す
    - 定数の値にまつわる背景
- 読み手の立場にたって考える
    - コードを読んだ人が「えっ？」と思うところを予想してコメントをつける
    - ファイルやクラスのトップには「全体像」のコメントを書く
    - 読み手が細部にとらわれないよう、コードブロックにコメントをつけて概要をまとめる

### 6章：コメントは正確で簡潔に

- あいまいな代名詞「それ」、「これ」などを利用すると読み手は何をさしているのか判断する必要がある
    - ❌データをキャッシュに入れる。ただし、先にそのサイズをチェックする
    - ⭕️データをキャッシュに入れる。ただし、先にデータのサイズをチェックする

### 7章：制御フローを読みやすくする

- ネストは極力浅くする
    - ループ内部のネストを削除するにはcontinueを利用するといい

### 8章：巨大な式を分割する

- コードが複雑になっている時、一度立ちどまって、全く違った手法を考えることで解決する場合がある
    - 「反対」から問題を解決してみる

### 11章：一度に一つのことを

- 読みにくいコードがあれば、そこで行われているタスクを全て列挙してみる。列挙した処理から、関数やクラスに分割できるものを特定する

### 12章：コードに想いを込める

- 解こうとしている課題を一度簡単なことばで文書化してみる
    - 説明することでコードがより自然になっていく

### 13章：短いコードを書く

- 身近なライブラリを利用する
    - プログラマは言語内の標準ライブラリで実現できることを忘れている場合が多い
    - どんなメソッドが用意されているのかたまには15分ほどかけて標準ライブラリの関数を調べてみる
